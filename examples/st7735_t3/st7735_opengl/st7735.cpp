#include <ST7735_t3.h> // Hardware-specific library for ST7735
#include <SD.h>
#include "../../../SvgParser.h"
#include "../../../SvgOutput_st7735_t3.h"

#ifdef BUILD_FOR_OPENGL_EMULATOR
#include "st7735_opengl.h"
st7735_opengl TFT = st7735_opengl();
#else
#define TFT_CS   6  // CS & DC can use pins 2, 6, 9, 10, 15, 20, 21, 22, 23
#define TFT_DC    2  //  but certain pairs must NOT be used: 2+10, 6+9, 20+23, 21+22
#define TFT_RST   -1 // RST can use any pin
ST7735_t3 TFT = ST7735_t3(TFT_CS, TFT_DC, TFT_RST);
#endif

SvgOutput_ST7735 *st7735_out = new SvgOutput_ST7735(TFT);
SvgParser parser = SvgParser(st7735_out);

unsigned char test5_svg[] = {
        0x3c, 0x73, 0x76, 0x67, 0x3e, 0x3c, 0x70, 0x61, 0x74, 0x68, 0x20, 0x64,
        0x3d, 0x22, 0x6d, 0x20, 0x36, 0x34, 0x2e, 0x30, 0x35, 0x34, 0x38, 0x36,
        0x32, 0x2c, 0x31, 0x31, 0x36, 0x2e, 0x33, 0x35, 0x36, 0x37, 0x38, 0x20,
        0x2d, 0x31, 0x2e, 0x38, 0x35, 0x32, 0x35, 0x34, 0x36, 0x2c, 0x2d, 0x31,
        0x2e, 0x37, 0x36, 0x34, 0x34, 0x20, 0x43, 0x20, 0x32, 0x32, 0x2e, 0x33,
        0x37, 0x32, 0x35, 0x38, 0x31, 0x2c, 0x37, 0x37, 0x2e, 0x35, 0x33, 0x39,
        0x31, 0x37, 0x34, 0x20, 0x31, 0x31, 0x2e, 0x35, 0x36, 0x36, 0x30, 0x37,
        0x31, 0x2c, 0x36, 0x34, 0x2e, 0x34, 0x38, 0x32, 0x33, 0x33, 0x31, 0x20,
        0x31, 0x31, 0x2e, 0x35, 0x36, 0x36, 0x30, 0x37, 0x31, 0x2c, 0x34, 0x33,
        0x2e, 0x33, 0x30, 0x39, 0x31, 0x30, 0x39, 0x20, 0x63, 0x20, 0x30, 0x2c,
        0x2d, 0x31, 0x37, 0x2e, 0x36, 0x34, 0x34, 0x32, 0x36, 0x33, 0x20, 0x31,
        0x32, 0x2e, 0x33, 0x35, 0x30, 0x33, 0x30, 0x32, 0x2c, 0x2d, 0x33, 0x31,
        0x2e, 0x37, 0x35, 0x39, 0x38, 0x33, 0x33, 0x20, 0x32, 0x37, 0x2e, 0x37,
        0x38, 0x38, 0x31, 0x38, 0x39, 0x2c, 0x2d, 0x33, 0x31, 0x2e, 0x37, 0x35,
        0x39, 0x38, 0x33, 0x33, 0x20, 0x31, 0x32, 0x2e, 0x36, 0x35, 0x39, 0x30,
        0x35, 0x35, 0x2c, 0x30, 0x20, 0x31, 0x39, 0x2e, 0x37, 0x36, 0x30, 0x34,
        0x38, 0x34, 0x2c, 0x38, 0x2e, 0x31, 0x31, 0x36, 0x33, 0x37, 0x39, 0x20,
        0x32, 0x34, 0x2e, 0x37, 0x30, 0x30, 0x36, 0x30, 0x32, 0x2c, 0x31, 0x34,
        0x2e, 0x34, 0x36, 0x38, 0x33, 0x34, 0x37, 0x20, 0x34, 0x2e, 0x39, 0x34,
        0x30, 0x31, 0x33, 0x2c, 0x2d, 0x36, 0x2e, 0x33, 0x35, 0x31, 0x39, 0x36,
        0x38, 0x20, 0x31, 0x32, 0x2e, 0x30, 0x34, 0x31, 0x35, 0x34, 0x39, 0x2c,
        0x2d, 0x31, 0x34, 0x2e, 0x34, 0x36, 0x38, 0x33, 0x34, 0x37, 0x20, 0x32,
        0x34, 0x2e, 0x37, 0x30, 0x30, 0x36, 0x31, 0x35, 0x2c, 0x2d, 0x31, 0x34,
        0x2e, 0x34, 0x36, 0x38, 0x33, 0x34, 0x37, 0x20, 0x31, 0x35, 0x2e, 0x34,
        0x33, 0x37, 0x38, 0x38, 0x33, 0x2c, 0x30, 0x20, 0x32, 0x37, 0x2e, 0x37,
        0x38, 0x38, 0x31, 0x39, 0x33, 0x2c, 0x31, 0x34, 0x2e, 0x31, 0x31, 0x35,
        0x35, 0x37, 0x20, 0x32, 0x37, 0x2e, 0x37, 0x38, 0x38, 0x31, 0x39, 0x33,
        0x2c, 0x33, 0x31, 0x2e, 0x37, 0x35, 0x39, 0x38, 0x33, 0x33, 0x20, 0x30,
        0x2c, 0x32, 0x31, 0x2e, 0x31, 0x37, 0x33, 0x32, 0x32, 0x32, 0x20, 0x2d,
        0x31, 0x30, 0x2e, 0x38, 0x30, 0x36, 0x35, 0x32, 0x2c, 0x33, 0x34, 0x2e,
        0x32, 0x33, 0x30, 0x30, 0x36, 0x35, 0x20, 0x2d, 0x35, 0x30, 0x2e, 0x36,
        0x33, 0x36, 0x32, 0x36, 0x33, 0x2c, 0x37, 0x31, 0x2e, 0x32, 0x38, 0x33,
        0x32, 0x37, 0x31, 0x20, 0x7a, 0x22, 0x20, 0x69, 0x64, 0x3d, 0x22, 0x70,
        0x61, 0x74, 0x68, 0x31, 0x30, 0x22, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65,
        0x3d, 0x22, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x2d, 0x77, 0x69, 0x64,
        0x74, 0x68, 0x3a, 0x33, 0x2e, 0x33, 0x30, 0x30, 0x38, 0x35, 0x3b, 0x66,
        0x69, 0x6c, 0x6c, 0x3a, 0x6e, 0x6f, 0x6e, 0x65, 0x3b, 0x73, 0x74, 0x72,
        0x6f, 0x6b, 0x65, 0x3a, 0x23, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3b,
        0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x2d, 0x6f, 0x70, 0x61, 0x63, 0x69,
        0x74, 0x79, 0x3a, 0x31, 0x22, 0x20, 0x2f, 0x3e, 0x3c, 0x2f, 0x73, 0x76,
        0x67, 0x3e, 0x0a
};
unsigned int test5_svg_len = 483;
void loop() {
    delay(100);
}

void setup() {
    Serial.begin(9600);
    SD.setSDCardFileData((char*)test5_svg, test5_svg_len);
    TFT.initR(INITR_144GREENTAB);
    TFT.setRotation(3);
    TFT.fillScreen(ST7735_WHITE);
    parser.readFile("abc.svg");
    parser.print(0,0);
}

#ifdef BUILD_FOR_OPENGL_EMULATOR

void my_yield() {
    if(!TFT.shouldClose()) {
        TFT.update();
    }
}

int main() {
    yield_impl = my_yield;

    setup();
    while(!TFT.shouldClose()) {
        loop();
    }
}
#endif