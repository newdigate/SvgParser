cmake_minimum_required(VERSION 3.10)
set(CMAKE_CXX_STANDARD 11)

if (DEFINED BUILD_FOR_OPENGL_EMULATOR)
    message("build for st7735_t3 opengl emulator...")
    add_definitions(-DBUILD_FOR_OPENGL_EMULATOR)

    add_definitions(-DGL_SILENCE_DEPRECATION)

    #brew install pkg-config
    find_package(PkgConfig REQUIRED)

    #brew install glfw
    pkg_search_module(glfw REQUIRED glfw3)
    include_directories(${glfw_INCLUDE_DIRS})

    pkg_search_module(glew REQUIRED glew)
    include_directories(${glew_INCLUDE_DIRS})
    if(WIN32)
        set(LIBS glfw3 opengl32)
    elseif(UNIX AND NOT APPLE)
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
        find_package(OpenGL REQUIRED)
        add_definitions(${OPENGL_DEFINITIONS})
        find_package(X11 REQUIRED)
        # note that the order is important for setting the libs
        # use pkg-config --libs $(pkg-config --print-requires --print-requires-private glfw3) in a terminal to confirm
        set(LIBS ${GLFW3_LIBRARY} X11 Xrandr Xi Xxf86vm GL dl pthread freetype GLEW glfw)
        set (CMAKE_CXX_LINK_EXECUTABLE "${CMAKE_CXX_LINK_EXECUTABLE} -ldl")
    elseif(APPLE)
        INCLUDE_DIRECTORIES(/System/Library/Frameworks)
        FIND_LIBRARY(glfw3_LIBRARY glfw)
        FIND_LIBRARY(COCOA_LIBRARY Cocoa)
        FIND_LIBRARY(OpenGL_LIBRARY OpenGL)
        FIND_LIBRARY(IOKit_LIBRARY IOKit)
        FIND_LIBRARY(glew_LIBRARY glew)
        FIND_LIBRARY(CoreVideo_LIBRARY CoreVideo)
        MARK_AS_ADVANCED(COCOA_LIBRARY OpenGL_LIBRARY)
        FIND_LIBRARY(FREETYPE_LIBRARIES FreeType)
        SET(APPLE_LIBS ${COCOA_LIBRARY} ${IOKit_LIBRARY} ${OpenGL_LIBRARY} ${CoreVideo_LIBRARY})
        SET(APPLE_LIBS ${APPLE_LIBS} ${GLFW3_LIBRARY} ${ASSIMP_LIBRARY} ${FREETYPE_LIBRARIES} ${glfw3_LIBRARY} ${glew_LIBRARY})
        set(LIBS ${LIBS} ${APPLE_LIBS})
    endif()

    find_package(teensy_x86_stubs)
    include_directories(${teensy_x86_stubs_INCLUDE_DIR})

    find_package(teensy_st7735_linux_stubs)
    include_directories(${teensy_st7735_linux_stubs_INCLUDE_DIR})

    find_package(teensy_st7735_linux_opengl)
    include_directories(${teensy_st7735_linux_extras_opengl_INCLUDE_DIR})
else()
    set(TEENSY_VERSION 40 CACHE STRING "Set to the Teensy version corresponding to your board (30 or 31 allowed)" FORCE)
    set(CPU_CORE_SPEED 600000000 CACHE STRING "Set to 24000000, 48000000, 72000000 or 96000000 to set CPU core speed" FORCE) # Derived variables
    set(CPU cortex-m7 CACHE STRING "Set to cortex-m7, cortex-m4")

    set(COMPILERPATH "/Applications/ARM/bin/")
    set(DEPSPATH "/Users/moolet/Development/newdigate/temp_dep")
    set(COREPATH "${DEPSPATH}/cores/teensy4/")

    find_package(teensy_cmake_macros)

    import_arduino_library(${DEPSPATH} SPI)
    import_arduino_library(${DEPSPATH} SdFat/src)
    import_arduino_library(${DEPSPATH} SdFat/src/common)
    import_arduino_library(${DEPSPATH} SdFat/src/DigitalIO)
    import_arduino_library(${DEPSPATH} SdFat/src/ExFatLib)
    import_arduino_library(${DEPSPATH} SdFat/src/FatLib)
    import_arduino_library(${DEPSPATH} SdFat/src/FsLib)
    import_arduino_library(${DEPSPATH} SdFat/src/iostream)
    import_arduino_library(${DEPSPATH} SdFat/src/SdCard)
    import_arduino_library(${DEPSPATH} SdFat/src/SpiDriver)
    import_arduino_library(${DEPSPATH} SD/src)
    import_arduino_library(${DEPSPATH} Audio)
    import_arduino_library(${DEPSPATH} Audio/utility)
    import_arduino_library(${DEPSPATH} SerialFlash)
    import_arduino_library(${DEPSPATH} SerialFlash/util)
    import_arduino_library(${DEPSPATH} ST7735_t3)
    import_arduino_library(${DEPSPATH} Wire)
    import_arduino_library(${DEPSPATH} arm_math/src)
endif()